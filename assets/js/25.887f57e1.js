(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{653:function(t,a,e){"use strict";e.r(a);var s=e(10),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"创建链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建链表"}},[t._v("#")]),t._v(" 创建链表")]),t._v(" "),e("p",[e("code",[t._v("class Node{ int val; Node next; Node(){ } Node(int val){ this.val = val; } Node(int val, Node next){ this.val = val; this.next = next; } }")])]),t._v(" "),e("h1",{attrs:{id:"初始化链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化链表"}},[t._v("#")]),t._v(" 初始化链表")]),t._v(" "),e("p",[e("code",[t._v("public class MyLinkedList{ Node head = new Node(); int size; MyLinkedList(){ 初始化参数 } }")])]),t._v(" "),e("h1",{attrs:{id:"注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[t._v("#")]),t._v(" 注意点")]),t._v(" "),e("p",[t._v("1.查找插入删除的位置都需要判断")]),t._v(" "),e("h1",{attrs:{id:"反转链表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反转链表"}},[t._v("#")]),t._v(" 反转链表")]),t._v(" "),e("h2",{attrs:{id:"方法一双指针法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一双指针法"}},[t._v("#")]),t._v(" 方法一双指针法")]),t._v(" "),e("p",[t._v("定义三个指针，pre = null，cur = head； temp 存储cur的下一个位置\n每次都把cur指向pre，pre = cur， cur = temp；")]),t._v(" "),e("h2",{attrs:{id:"方法二递归法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二递归法"}},[t._v("#")]),t._v(" 方法二递归法")]),t._v(" "),e("p",[t._v("递归终止的条件是cur==null\n每次操作一条边")])])}),[],!1,null,null,null);a.default=r.exports}}]);