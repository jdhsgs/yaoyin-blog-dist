(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{657:function(t,s,e){"use strict";e.r(s);var a=e(10),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"不重复的交集可以使用set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不重复的交集可以使用set"}},[t._v("#")]),t._v(" 不重复的交集可以使用set")]),t._v(" "),e("p",[t._v("遍历s，生成一个set，遍历p，如果在set中，就加入set res，最后将res转为数组返回")]),t._v(" "),e("h1",{attrs:{id:"可重复的交集可以使用map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可重复的交集可以使用map"}},[t._v("#")]),t._v(" 可重复的交集可以使用map")]),t._v(" "),e("p",[t._v("首先遍历长度更长的数组s，用map存储每个字母出现的次数，然后遍历p， 如果对应的次数>0，则加入数组res中，")])])}),[],!1,null,null,null);s.default=r.exports}}]);