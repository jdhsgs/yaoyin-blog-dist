(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{655:function(t,a,s){"use strict";s.r(a);var e=s(10),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"链表相交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表相交"}},[t._v("#")]),t._v(" 链表相交")]),t._v(" "),s("h2",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目：")]),t._v(" "),s("p",[t._v("给定两个（单向）链表，判定它们是否相交并返回交点。请注意相交的定义基于节点的引用，而不是基于节点的值。换句话说，如果一个链表的第k个节点与另一个链表的第j个节点是同一节点（引用完全相同），则这两个链表相交。")]),t._v(" "),s("h2",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),s("p",[t._v("首先：获得两个链表的长度lenA，lenB\n第二步：获取长度差值gap\n第三步：将两个链表移动同一个起点\n第四步：比较什么时候遇到相交的节点，将它返回，没有就返回null")])])}),[],!1,null,null,null);a.default=r.exports}}]);